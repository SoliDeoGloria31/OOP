课程：Python面向对象
进度：day1

主要内容：
1. 面向对象的概念
2. 面向对象的三大特性：封装、继承、多态
3. 面向对象的技术特性
4. 方法重载、运算符重载
5. 面向对象的设计

今天内容
1. 面向对象基本概念
  1）面向过程：考虑实现过程、考虑每一步如何做
       代码组织单位：函数

  2）面向对象
    a)提出的原因
        - 成本和可行性
        - 代码复用，提高开发效率
        - 软件既要保持稳定性，又要满足不断变更
          对扩展开放，对修改封闭
        - 面向过程方式，在某些领域有局限性

   b) 什么是面向对象
        - Object Orainted Programming(简写OOP)
           关注对象，把事物看做一个一个对象，以对象为中心
           把事物归纳成一个一个的类
        - 提供了另一种分析、解决问题的方式

   c) 优点
       - 思想方法层面：更有利于归纳、分析、解决问题
                                  更接近于人的思维方式
       - 技术层面
          重用性：有利于代码复用，提高开发效率
          扩展性：能够方便对现有代码进行扩展和改写
          灵活性：程序设计具有更多的灵活性、弹性

       - 适用场景
          面向过程：系统级软件，嵌入式
          面向对象：企业级应用，图形库，游戏

        - 类和对象 （重点）
          类（class）：具有共同特征事物的统称。例如学生，汽车
          对象（object）: 类当中一个特殊的个体，特定、具体的

       - 类的构成 （重点）
         属性：描述对象“有什么”，数据特征
         行为：描述对象“能干什么”，行为特征

       - Python中类的定义  （重点）
         class  ClassName([父类列表]):
	"类的代码"
	# 属性（一般通过__init__构造方法创建）
	# 方法1
	# 方法2
	# ......
         说明：  class              定义类的关键字
                      ClassName   类名称（一般以大写字符开头）
                      父类列表       发生继承时候，表示从哪个类继承

        - 示例：定义一个汽车类(AutoMobile)
                    代码见auto_mobile.py

        - OOP小结：
           - 使用class AutoMobile定义了一个类，类中包含了
             名称、颜色、排量等属性；启动(startup), 行驶(run),
             停止(stop)，打印信息(info)等方法

           - 方法在类的内部定义，也叫成员函数或方法，定义了
             类“能干什么”，或“具有哪些功能”。和普通函数
             有个重要差别，就是必须以self作为第一个参数。self
             自动绑定调用该方法的对象

           - 实例化：创建一个类的对象
             am = AutoMobile("家用轿车", "红色", 2.0)
             
             * 该语句执行成功后，会返回一个对象，通过赋值语句
             将该对象绑定到am变量上
             * 实例化对象时，要传入的参数根据__init__方法确定
           
           - __init__（）方法，称之为“构造方法”
             在对象被创建时自动调用
             作用是创建属性，并且进行初始化

           - 对象被创建后，可以通过"对象.方法名()"来调用方法
             通过"对象.属性"来访问对象的属性 

    
 






