上次内容回顾：
1.多态

2.面向对象的技术特性
    1）构造方法与析构方法
        -构造：__init__()
         调用时机：对象被创建时自动调用
         作用：创建对象属性，并赋值
         注意：子类构造方法显示调用父类构造方法
        -析构：__del__()
         调用时机：对象被销毁时调用
         作用：对象销毁时执行清理操作
    2）object类：所有类最终的父类
                如果类定义时没有指定父类，默认从object中继承
                __base__、__bases__查看父类
    3）super()和issubclass()函数
       super()：获得父类的绑定
           两种格式：super() 只能在类的方法中使用
                   super(type, obj) obj必须是type的实例化对象
                                可在任何地方使用
       issubclass()：判断某个类是不是另一个类的子类
           格式：issubclass(cls, cls_or_tuple)
    3）多重继承：一个类有多个父类
       MRO：方法解析顺序，__mro__
            从下至上，从左至右

3.函数重写：让对象操作更方便
    1）对象转字符串函数
        str(): __str__(),返回字符串给人阅读
        repr():__repr__(),返回字符串给解释器阅读
    2）内建函数
        abs():__abs__()
        len():__len__()
        reversed():__reversed__()
        round():__round__()
    3）数值转换函数
        int():__int__()
        float():__float__()
        complex():__complex__()
        bool():__bool__()

4.属性操作函数
    getattr(obj, name)：获取对象属性
    setattr(obj, name, value)：设置某个属性值
    hasattr(obj, name)：判断对象有没有某个属性
    delattr(obj, name)：删除某个属性值

作业：

============================

《深入浅出设计模式》


今天内容：
1.可迭代对象
    1）什么是迭代器
    2）代码特征：重写__iter__方法返回可迭代对象
               重写__next__方法获取下一个元素

2.运算符重载
    1）什么是运算符重载：自定义类中，重写某些方法，重写后就可以对对象进行某些运算符操作
    2）目的：
        -简化对象操作
         例如：c = 'abc' + '123'
             d = '123' > '456'
        -代码清晰、直观
        -可以在类中自定义运算符
    3）算术运算符重载
        -重写方法后，支持 + - * // / % **
        -重载方法和运算符的对象关系
         __add__(self,rhs)
         __sub__(self,rhs)
         __mul__(self,rhs)
         __truediv__(self,rhs)
         __floordiv__(self,rhs)
         __mod__(self,rhs)
         __pow__(self,rhs)


课堂练习：
    在MyList类中，重载 +  *  运算符
        L1 = MyList([1,2,3])
        L2 = MyList([4,5,6])
        L1 + L2 ==> MyList([1,2,3,4,5,6])
        L1 * 2 ==>  MyList([1,2,3,1,2,3])