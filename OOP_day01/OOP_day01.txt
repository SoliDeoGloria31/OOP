课程:Python 面向对象
进度:day01


今天内容提要:
    1.OOP概念:以对象为中心,关注功能,关注结果
        1)类和对象(重点)
            类:具有共同特征事物的总称
        2)如何定义类(重点)
        3)类的构成(重点)
            属性
            方法(方法中可以定义变量！！！)
        4)封装(重点)
        5)继承(重点)

主要内容:
    1.面向对象
    2.面向对象的三大特性:封装,继承,多态
    3.面向对象的技术特性
    4.方法重载,运算符重载
    5.面向对象的设计

今天内容:
1.面向对象基本概念
    1)面向过程:想好每一步怎么做,以过程为中心,
      代码组织单位:函数
    2)面向对象:
      -成本和可行性
      -代码复用(用别人代码),提高开发效率
      -软件既要保持稳定性,又要满足不断变更,对扩展方法,对修改封闭
      -面向过程方式,在某些领域有局限性
      -Object Orainted Programming(简写OOP)
       关注对象,把事物看作一个个对象
    
    -适用场景:
     面向过程:系统级软件,嵌入式
     面向对象:企业级应用,图形库,游戏
    
    -类和对象
     类(class):具有共同特征事物的统称

示例: 计算椭圆的周长和面积
class ellipse:
    def __init__(self, a, b):
        self.a = a  # 属性:短半径
        self.b = b  # 属性:长半径

    def calc_len(self):  # 计算周长
        return 2 * 3.14 * self.a + 4 * (self.b - self.a)

    def calc_area(self):  # 计算面积
        return 3.14 * self.a * self.b

print(ellipse(3,5))
print(ellipse(3,5).calc_len(),ellipse(3,5).calc_area())

结果:
<__main__.ellipse object at 0x7f91f1c4f2e8>
26.84 47.1


类的构成:
属性:描述对象'有什么',数据特征
行为:描述对象'能干什么',行为特征

python中类的定义:
class ClassName([父类列表]):
    '类的代码'
    # 属性(一般通过__init__构成方法创建)
    # 方法1
    # 方法2
    # ...

说明:
    class     定义类的关键字
    ClassName 类名称(一般以大写字符开头)
    父类列表   发生继承时候,表示从哪一个类继承


示例: 定义一个汽车类(AutoMobile)
class AutoMobile:
    # a = 'a'
    # global b
    # b = 'b'
    def __init__(self, name, color, output_volumn):
        self.name = name
        self.color = color
        self.output_volumn = output_volumn

    def startup(self):
        print('汽车启动!')

    def run(self):
        print('汽车行驶!')

    def stop(self):
        print('汽车停止!')

    def info(self):
        print('\n名称:%s\n颜色:%s\n排量:%.2fL' %
              (self.name, self.color, self.output_volumn))


if __name__ == '__main__':
    auto_mobile = AutoMobile('家用轿车', '红色', 2.0)

    auto_mobile.startup()
    auto_mobile.run()
    auto_mobile.stop()
    auto_mobile.info()

    # print(a)
    # print(b)


OOP小结:
    -使用class AutoMobile定义了一个类,类中包含了:
     名称,颜色,排量等 属性;启动,行驶,停止,打印信息等 方法
    -方法在类的内部定义,也叫'成员函数','成员方法'
     定义了类能干什么,或者说具有哪些功能
     和普通函数的重要差别,是必须以self作为第一个参数
     self自动绑定调用该方法的对象
    -示例化:创建一个类的对象
     auto_mobile = AutoMobile('家用轿车', '红色', 2.0)
     *该语句执行成功后,会返回一个对象,通过赋值语句将该对象绑定到auto_mobile变量上
     *实例化对象时,要传入的参数根据__init__方法确定
    -__init__()方法:'构造函数','构成方法'
     在对象被创建时自动调用
     作用:创建属性,并进行初始化

面向对象三大特征:分装,继承,多态
    -封装:
     将属性,方法,放到类的内部
     对象对外提供了一组方法(接口),来对类的数据进行访问
     对于一个类或对象,外部主要关注功能,而不是功能的实现细节
        最少知道原则:让外部知道内部细节越少越好
        私有属性可以传参,但外部不能调用
    -继承:
    *代码冗余:不同模块中相同或相似的代码
        导致的问题:
            重复劳动
            编码,测试 工作量增大
            修改,维护 困难
    *继承:
        -将事物共同的特征抽象出来,定义到父类中
         子类继承父类,自动获得父类的行为和属性
        -继承描述事物的共同特征
        -继承能够减少代码冗余,减少工作量,提升效率
         使得代码更容易维护
    *几个相关的概览:
        -父类(基类,超类),子类(派生类)
        -父类相对子类更抽象,范围更宽泛
         子类相对于父类更具体,范围更狭小
        -单继承(只有一个父类,Java)
         多继承(超过一个父类,Python/C++)
        -Python如何实现继承:
            class类名称(父类1[,父类2,父类3,...])
                类的实现代码
        -通过继承改写AK47,AWP类,添加父类Gun
         见改写后的ak47.py,awp.py,gun.py,test.py
        -继承小结
         *通过归纳,抽象, 将共同特征(属性,行为)放到父类中
          子类通过继承,获得父类的行为和属性
         *能够消除代码冗余
         *能够在不改变父类代码的情况下,子类添加特有的行为和属性
          (例如AWP类中的openTelescope和closeTelescope方法)
          子类从而实现功能扩展,变更


面向对象编写程序三部曲(记住,理解,应用)
    第一步:设计编写类.根据业务逻辑,从具体事务中归纳,抽象出共同的属性,方法,编写代码
        class类名:
            构造方法
            其他方法
    第二步:根据定义的类,实例化一个对象
        ak = ak47.AK47()
        awp = awp.AWP()
    第三步:调用对象方法,使用类所提供的功能
        ak.reload()
        ak.fire()
        awp.reload()
        awp.fire()

作业:(明天引用此例子讲 多态)
    1.定义一个鸟类(Bird),具有吃(eat),飞行(fly),繁殖(reproduction)方法
    2.定义老鹰类(Eagle),鸵鸟类(Ostrich)类,继承自Bird类
    3.编写测试代码,测试eat,fly,reproduction方法

####

晓峰老师:
    实例方法,类方法,静态方法
    实例方法:用self,通过实例调用
    初始化方法(调用实体时,自动调用__init__)
    *****方法(删除实体时)

